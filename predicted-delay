import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

# Load your data here (using pandas, for example)
# For this example, we'll create some random data
data = np.random.rand(1000, 4)
df = pd.DataFrame(data, columns=['Distance', 'Freight_Weight', 'Freight_Type', 'Delay'])

# Split the data into features (X) and target (y)
X = df[['Distance', 'Freight_Weight', 'Freight_Type']]
y = df['Delay']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a Support Vector Regressor model
model = SVR(kernel='linear', C=1)

# Train the model
model.fit(X_train_scaled, y_train)

# Evaluate the model on the test set
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error on the test set: {mse:.4f}")

# Make predictions for a specific scenario
# For example: Distance = 300, Freight_Weight = 1000, Freight_Type = 1 (Bulk)
new_data = np.array([[300, 1000, 1]])
new_data_scaled = scaler.transform(new_data)
predicted_delay = model.predict(new_data_scaled)
print(f"Predicted delay for Distance=300, Freight_Weight=1000, Freight_Type=1 (Bulk): {predicted_delay[0]:.2f} minutes")
