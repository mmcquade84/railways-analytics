import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load your data here (using pandas, for example)
# For this example, we'll create some random data
data = np.random.rand(1000, 3)
df = pd.DataFrame(data, columns=['Distance', 'Freight_Weight', 'Delay'])

# Split the data into features (X) and target (y)
X = df[['Distance', 'Freight_Weight']]
y = df['Delay']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a simple ANN model
model = Sequential([
    Dense(32, activation='relu', input_dim=2),
    Dense(16, activation='relu'),
    Dense(1)
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)

# Evaluate the model on the test set
loss = model.evaluate(X_test_scaled, y_test, verbose=0)
print(f"Mean Squared Error on the test set: {loss:.4f}")

# Make predictions for a specific scenario
# For example: Distance = 300, Freight_Weight = 1000
new_data = np.array([[300, 1000]])
new_data_scaled = scaler.transform(new_data)
predicted_delay = model.predict(new_data_scaled)
print(f"Predicted delay for Distance=300, Freight_Weight=1000: {predicted_delay[0][0]:.2f} minutes")
